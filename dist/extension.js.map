{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nfunction formatDate(d: Date): string {\r\n  const y = d.getFullYear();\r\n  const m = String(d.getMonth() + 1).padStart(2, '0');\r\n  const day = String(d.getDate()).padStart(2, '0');\r\n  return `${y}${m}${day}`;\r\n}\r\n\r\nconst CPP_TEMPLATE = `\r\n#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int test;\r\n    cin >> test;\r\n    while (test--) {\r\n        // Your code here\r\n    }\r\n\r\n  return 0;\r\n}\r\n`;\r\n\r\nasync function ensureDir(dir: string) {\r\n  await fs.mkdir(dir, { recursive: true });\r\n}\r\n\r\nasync function getNextSerial(dir: string, prefix: string): Promise<string> {\r\n  // Look for files like YYYYMMDD-XXX.cpp\r\n  let max = 0;\r\n  try {\r\n    const entries = await fs.readdir(dir);\r\n    for (const name of entries) {\r\n      const match = name.match(new RegExp(`^${prefix}-([0-9]{3})\\\\.cpp$`));\r\n      if (match) {\r\n        const n = parseInt(match[1], 10);\r\n        if (!Number.isNaN(n)) max = Math.max(max, n);\r\n      }\r\n    }\r\n  } catch {\r\n    // ignore\r\n  }\r\n  const next = (max + 1).toString().padStart(3, '0');\r\n  return next;\r\n}\r\n\r\nasync function createCppFileInWorkspaceRoot() {\r\n  const folders = vscode.workspace.workspaceFolders;\r\n  if (!folders || folders.length === 0) {\r\n    vscode.window.showErrorMessage('No workspace folder open.');\r\n    return;\r\n  }\r\n  const root = folders[0].uri.fsPath;\r\n  const targetDir = root; // Create directly in workspace root\r\n  const today = formatDate(new Date());\r\n  const serial = await getNextSerial(targetDir, today);\r\n  const fileName = `${today}-${serial}.cpp`;\r\n  const filePath = path.join(targetDir, fileName);\r\n\r\n  await fs.writeFile(filePath, CPP_TEMPLATE, { encoding: 'utf8' });\r\n\r\n  const doc = await vscode.workspace.openTextDocument(vscode.Uri.file(filePath));\r\n  await vscode.window.showTextDocument(doc, { preview: false });\r\n}\r\n\r\nfunction parseDateFromCppFileName(name: string): string | null {\r\n  const m = name.match(/^(\\d{8})-\\d{3}\\.cpp$/);\r\n  return m ? m[1] : null;\r\n}\r\n\r\nasync function pathExists(p: string): Promise<boolean> {\r\n  try {\r\n    await fs.access(p);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function moveFileOverwrite(src: string, dest: string) {\r\n  await ensureDir(path.dirname(dest));\r\n  try {\r\n    await fs.rename(src, dest);\r\n  } catch (e: any) {\r\n    if (e.code === 'EXDEV') {\r\n      await fs.copyFile(src, dest);\r\n      await fs.unlink(src);\r\n    } else if (e.code === 'EEXIST') {\r\n      await fs.rm(dest, { force: true });\r\n      await fs.rename(src, dest);\r\n    } else {\r\n      // try overwrite by copy\r\n      await fs.copyFile(src, dest);\r\n      await fs.unlink(src);\r\n    }\r\n  }\r\n}\r\n\r\nasync function moveDirMerge(srcDir: string, destDir: string) {\r\n  await ensureDir(destDir);\r\n  const entries = await fs.readdir(srcDir, { withFileTypes: true });\r\n  for (const entry of entries) {\r\n    const s = path.join(srcDir, entry.name);\r\n    const d = path.join(destDir, entry.name);\r\n    if (entry.isDirectory()) {\r\n      await moveDirMerge(s, d);\r\n    } else {\r\n      await moveFileOverwrite(s, d);\r\n    }\r\n  }\r\n  // remove now-empty source directory\r\n  await fs.rmdir(srcDir).catch(() => {});\r\n}\r\n\r\nasync function archiveCppAndOut() {\r\n  const folders = vscode.workspace.workspaceFolders;\r\n  if (!folders || folders.length === 0) {\r\n    vscode.window.showErrorMessage('No workspace folder open.');\r\n    return;\r\n  }\r\n  const root = folders[0].uri.fsPath;\r\n\r\n  const entries = await fs.readdir(root);\r\n  const cppFiles = entries.filter((n) => n.toLowerCase().endsWith('.cpp'));\r\n  if (cppFiles.length === 0) {\r\n    vscode.window.showWarningMessage('No .cpp files found to archive.');\r\n    return;\r\n  }\r\n\r\n  // Determine earliest date from filenames matching YYYYMMDD-XXX.cpp\r\n  const dated = cppFiles\r\n    .map((n) => ({ name: n, date: parseDateFromCppFileName(n) }))\r\n    .filter((x) => x.date !== null) as { name: string; date: string }[];\r\n\r\n  if (dated.length === 0) {\r\n    vscode.window.showWarningMessage('No dated C++ files (YYYYMMDD-XXX.cpp) found to derive archive date.');\r\n    return;\r\n  }\r\n\r\n  const earliest = dated.map((x) => x.date).sort()[0]!;\r\n  const archivesDir = path.join(root, 'archives');\r\n  const targetDir = path.join(archivesDir, earliest);\r\n  await ensureDir(targetDir);\r\n\r\n  // Move all .cpp files (dated or not) into the target dir\r\n  for (const name of cppFiles) {\r\n    const src = path.join(root, name);\r\n    const dest = path.join(targetDir, name);\r\n    await moveFileOverwrite(src, dest);\r\n  }\r\n\r\n  // Move 'out' folder if present\r\n  const outSrc = path.join(root, 'out');\r\n  if (await pathExists(outSrc)) {\r\n    const outDest = path.join(targetDir, 'out');\r\n    if (await pathExists(outDest)) {\r\n      await moveDirMerge(outSrc, outDest);\r\n    } else {\r\n      try {\r\n        await fs.rename(outSrc, outDest);\r\n      } catch {\r\n        await moveDirMerge(outSrc, outDest);\r\n      }\r\n    }\r\n  }\r\n\r\n  const uri = vscode.Uri.file(targetDir);\r\n  vscode.window.showInformationMessage(`Archived to ${uri.fsPath}`);\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  const disposable = vscode.commands.registerCommand('autoDateFile.createFile', async () => {\r\n    try {\r\n  await createCppFileInWorkspaceRoot();\r\n    } catch (err: any) {\r\n      vscode.window.showErrorMessage(`Failed to create file: ${err?.message ?? err}`);\r\n    }\r\n  });\r\n  const disposable2 = vscode.commands.registerCommand('autoDateFile.archiveCppAndOut', async () => {\r\n    try {\r\n      await archiveCppAndOut();\r\n    } catch (err: any) {\r\n      vscode.window.showErrorMessage(`Failed to archive: ${err?.message ?? err}`);\r\n    }\r\n  });\r\n\r\n  context.subscriptions.push(disposable, disposable2);\r\n}\r\n\r\nexport function deactivate() {}\r\n"],
  "mappings": "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",
  "names": []
}
