{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\nfunction formatDate(d: Date): string {\r\n  const y = d.getFullYear();\r\n  const m = String(d.getMonth() + 1).padStart(2, '0');\r\n  const day = String(d.getDate()).padStart(2, '0');\r\n  return `${y}${m}${day}`;\r\n}\r\n\r\nconst CPP_TEMPLATE = `\r\n#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int test;\r\n    cin >> test;\r\n    while (test--) {\r\n        // Your code here\r\n    }\r\n\r\n  return 0;\r\n}\r\n`;\r\n\r\nasync function ensureDir(dir: string) {\r\n  await fs.mkdir(dir, { recursive: true });\r\n}\r\n\r\nasync function getNextSerial(dir: string, prefix: string): Promise<string> {\r\n  // Look for files like YYYYMMDD-XXX.cpp\r\n  let max = 0;\r\n  try {\r\n    const entries = await fs.readdir(dir);\r\n    for (const name of entries) {\r\n      const match = name.match(new RegExp(`^${prefix}-([0-9]{3})\\\\.cpp$`));\r\n      if (match) {\r\n        const n = parseInt(match[1], 10);\r\n        if (!Number.isNaN(n)) max = Math.max(max, n);\r\n      }\r\n    }\r\n  } catch {\r\n    // ignore\r\n  }\r\n  const next = (max + 1).toString().padStart(3, '0');\r\n  return next;\r\n}\r\n\r\nasync function createCppFileInWorkspaceRoot() {\r\n  const folders = vscode.workspace.workspaceFolders;\r\n  if (!folders || folders.length === 0) {\r\n    vscode.window.showErrorMessage('No workspace folder open.');\r\n    return;\r\n  }\r\n  const root = folders[0].uri.fsPath;\r\n  const targetDir = root; // Create directly in workspace root\r\n  const today = formatDate(new Date());\r\n  const serial = await getNextSerial(targetDir, today);\r\n  const fileName = `${today}-${serial}.cpp`;\r\n  const filePath = path.join(targetDir, fileName);\r\n\r\n  await fs.writeFile(filePath, CPP_TEMPLATE, { encoding: 'utf8' });\r\n\r\n  const doc = await vscode.workspace.openTextDocument(vscode.Uri.file(filePath));\r\n  await vscode.window.showTextDocument(doc, { preview: false });\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  const disposable = vscode.commands.registerCommand('autoDateFile.createFile', async () => {\r\n    try {\r\n  await createCppFileInWorkspaceRoot();\r\n    } catch (err: any) {\r\n      vscode.window.showErrorMessage(`Failed to create file: ${err?.message ?? err}`);\r\n    }\r\n  });\r\n\r\n  context.subscriptions.push(disposable);\r\n}\r\n\r\nexport function deactivate() {}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,WAAsB;AACtB,SAAoB;AAGpB,SAAS,WAAW,GAAiB;AACnC,QAAM,IAAI,EAAE,YAAY;AACxB,QAAM,IAAI,OAAO,EAAE,SAAS,IAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AAClD,QAAM,MAAM,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS,GAAG,GAAG;AAC/C,SAAO,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG;AACvB;AAEA,IAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBrB,eAAe,cAAc,KAAa,QAAiC;AAEzE,MAAI,MAAM;AACV,MAAI;AACF,UAAM,UAAU,MAAS,WAAQ,GAAG;AACpC,eAAW,QAAQ,SAAS;AAC1B,YAAM,QAAQ,KAAK,MAAM,IAAI,OAAO,IAAI,MAAM,oBAAoB,CAAC;AACnE,UAAI,OAAO;AACT,cAAM,IAAI,SAAS,MAAM,CAAC,GAAG,EAAE;AAC/B,YAAI,CAAC,OAAO,MAAM,CAAC;AAAG,gBAAM,KAAK,IAAI,KAAK,CAAC;AAAA,MAC7C;AAAA,IACF;AAAA,EACF,QAAQ;AAAA,EAER;AACA,QAAM,QAAQ,MAAM,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AACjD,SAAO;AACT;AAEA,eAAe,+BAA+B;AAC5C,QAAM,UAAiB,iBAAU;AACjC,MAAI,CAAC,WAAW,QAAQ,WAAW,GAAG;AACpC,IAAO,cAAO,iBAAiB,2BAA2B;AAC1D;AAAA,EACF;AACA,QAAM,OAAO,QAAQ,CAAC,EAAE,IAAI;AAC5B,QAAM,YAAY;AAClB,QAAM,QAAQ,WAAW,oBAAI,KAAK,CAAC;AACnC,QAAM,SAAS,MAAM,cAAc,WAAW,KAAK;AACnD,QAAM,WAAW,GAAG,KAAK,IAAI,MAAM;AACnC,QAAM,WAAgB,UAAK,WAAW,QAAQ;AAE9C,QAAS,aAAU,UAAU,cAAc,EAAE,UAAU,OAAO,CAAC;AAE/D,QAAM,MAAM,MAAa,iBAAU,iBAAwB,WAAI,KAAK,QAAQ,CAAC;AAC7E,QAAa,cAAO,iBAAiB,KAAK,EAAE,SAAS,MAAM,CAAC;AAC9D;AAEO,SAAS,SAAS,SAAkC;AACzD,QAAM,aAAoB,gBAAS,gBAAgB,2BAA2B,YAAY;AACxF,QAAI;AACN,YAAM,6BAA6B;AAAA,IACjC,SAAS,KAAU;AACjB,MAAO,cAAO,iBAAiB,2BAA0B,2BAAK,YAAW,GAAG,EAAE;AAAA,IAChF;AAAA,EACF,CAAC;AAED,UAAQ,cAAc,KAAK,UAAU;AACvC;AAEO,SAAS,aAAa;AAAC;",
  "names": []
}
